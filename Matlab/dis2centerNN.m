function [y1,xf1] = dis2centerNN(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 16-Jun-2017 13:14:24.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 1xTS matrix, input #1
%   xi1 = 1x2 matrix, initial 2 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 1x2 matrix, final 2 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = 0;
x1_step1_gain = 0.00769749044027005;
x1_step1_ymin = -1;

% Layer 1
b1 = [1.9167680616727198;-0.69242315590811077;-0.47130821832024206;1.2815787454142307;-1.2403595568334898;2.5660036568591105;0.060502694186434364;-0.06758407758605374;1.3020036424267074;-0.34354356177049766];
IW1_1 = [5.2353645518321654 -4.3886593995584624;3.2942419149896867 -3.0376431768942904;1.1722555411481237 -2.1184233255250828;2.3197174097318296 -3.6745407582118919;-0.30655030067580491 -0.60570075291965608;1.7782573791824252 0.78754079094374208;-0.103689252249984 -0.10614857287379394;0.19074324420230204 0.95453672835809367;5.448782677136939 -6.7023058120263777;6.2620194302723657 -6.7093392111003629];

% Layer 2
b2 = 0.65373821078401673;
LW2_1 = [-2.8929237167105963 -4.702707762295347 -3.2961317949811328 -3.4985303908900365 1.25328102309745 0.65213444106964991 0.16140425225770663 0.35130751194461679 2.5058389676969481 2.6708228433803569];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = 0.00769749044027005;
y1_step1_xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
xd1 = [xd1 zeros(1,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),2,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
